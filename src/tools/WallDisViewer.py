from PyQt5.QtWidgets import QApplication
from PyQt5.QtGui import QColor, QPen
from PyQt5.QtCore import QPoint, Qt, QRect
import sys
import math

from src.utils import GridCanvas, Colors


class WallDisViewer(GridCanvas):

    def __init__(self):

        super().__init__()

        self.initData()
        self.initUI('WallDisViewer')

        self.setMouseTracking(True)

    def inBullet(self, bearing, range, dx):
        return (range * range + dx * dx - 2 * range * dx * math.cos(bearing)) < self.robotRwithGlue * self.robotRwithGlue

    def initData(self):

        self.mousePosEnd = QPoint(0, 0)

        self.robotX = 500
        self.robotY = 500
        self.robotR = 175
        self.robotRwithGlue = 179
        self.deltaX = 26
        self.redzoneR = self.robotRwithGlue + self.deltaX
        self.rightBrushXOffset = 92
        self.rightBrushYOffset = -113
        self.rightBrushR = 73

        #ptsStr = "200,100 200,101"
        # ptsStr = "-2671,0 -2671,-47 -2672,-95 -2668,-142 -2665,-190 -2664,-238 -2663,-285 -2657,-333 -2657,-381 -2658,-429 -2650,-477 -2650,-526 -2655,-576 -2644,-623 -2642,-672 -2647,-724 -2634,-771 -2642,-825 -2627,-872 -2628,-924 -2638,-980 -2620,-1027 -2631,-1085 -2642,-1145 -2622,-1192 -2633,-1254 -2611,-1301 -2611,-1359 -2619,-1422 -2632,-1490 -2606,-1537 -2609,-1601 -2627,-1676 -2597,-1723 -2596,-1789 -2626,-1878 -2593,-1924 -2594,-1997 -1016,-899 -991,-910 -959,-914 -802,-889 -761,-876 -745,-890 -705,-875 -689,-888 -658,-882 -631,-880 -600,-871 -585,-882 -558,-878 -531,-871 -516,-881 -495,-881 -472,-879 -447,-872 -432,-880 -411,-879 -389,-874 -374,-881 -352,-875 -336,-882 -317,-880 -299,-878 -279,-873 -264,-879 -246,-877 -227,-874 -212,-878 -195,-875 -178,-874 -162,-878 -145,-874 -129,-870 -113,-873 -97,-871 -81,-870 -66,-872 -51,-872 -36,-884 -21,-885 -5,-883 9,-883 25,-884 40,-881 55,-881 71,-882 86,-878 102,-879 117,-878 132,-877 148,-878 163,-879 179,-877 195,-878 210,-877 226,-874 241,-874 258,-875 273,-872 290,-818 285,-751 282,-696 278,-646 270,-589 280,-585 276,-546 268,-499 276,-496 275,-471 268,-435 275,-431 273,-409 267,-382 274,-378 268,-353 274,-349 274,-337 272,-320 272,-308 267,-291 272,-287 272,-276 268,-262 273,-258 271,-247 269,-237 273,-233 271,-222 267,-211 271,-207 267,-197 270,-193 270,-186 269,-179 265,-169 268,-166 269,-160 267,-153 270,-150 269,-143 267,-137 268,-132 270,-128 269,-123 267,-117 269,-113 266,-107 268,-103 268,-98 267,-94 269,-90 270,-86 267,-81 269,-77 266,-72 268,-68 268,-64 268,-60 268,-56 267,-52 268,-49 270,-45 269,-41 270,-37 267,-33 269,-30 270,-26 269,-22 266,-18 266,-14 268,-11 268,-7 229,-3 264,10 264,14 269,18 268,22 265,25 264,29 265,33 265,36 265,40 264,44 263,47 264,52 268,56 269,61 268,64 268,68 267,72 266,76 266,80 265,84 265,89 267,94 266,98 264,101 266,107 264,110 266,116 264,120 265,125 268,132 273,141 274,147 271,150 272,156 269,160 270,167 272,175 269,179 269,185 272,194 268,198 270,207 273,217 269,221 273,233 269,237 270,246 275,261 270,265 269,272 273,288 268,292 269,305 272,321 267,325 267,339 273,362 267,366 272,390 265,394 267,414 272,444 265,448 267,475 274,514 265,518 272,563 262,567 263,602 272,664 260,668 262,719 252,925 254,1019 240,1162 219,1165 198,1163 177,1159 157,1161 137,1163 116,1160 96,1161 76,1158 55,1155 35,1155 15,1154 -4,1156 -24,1155 -44,1153 -65,1153 -85,1151 -106,1153 -126,1151 -146,1148 -167,1150 -187,1146 -208,1145 -230,1148 -250,1143 -273,1147 -295,1150 -315,1144 -335,1137 -355,1130 -377,1130 -401,1132 -427,1138 -447,1130 -472,1133 -500,1140 -520,1130 -545,1131 -577,1143 -597,1131 -620,1126 -654,1136 -673,1123 -703,1126 -737,1133 -757,1119 -790,1123 -831,1136 -851,1120 -885,1121 -930,1135 -950,1117 -1000,1132 -1020,1114 -1060,1116 -1087,1103 -3562,2930 -3612,2866 -2788,1918 -2777,1839 -2745,1750 -2775,1701 -2761,1626 -2737,1548 -2764,1499 -2748,1429 -2723,1355 -2746,1306 -2737,1243 -2711,1174 -2732,1126 -2722,1066 -2701,1003 -2718,955 -2714,900 -2690,839 -2704,791 -2690,735 -2702,687 -2696,635 -2680,581 -2690,533 -2682,482 -2677,433 -2685,385 -2681,336 -2686,288 -2684,239 -2681,191 -2676,143 -2678,95 -2676,47"
        # ptsStr = "-2673,0 -2673,-47 -2670,-95 -2669,-142 -2666,-190 -2663,-237 -2663,-285 -2657,-333 -2660,-381 -2660,-430 -2652,-477 -2651,-526 -2654,-576 -2643,-623 -2642,-672 -2648,-724 -2635,-771 -2641,-824 -2626,-871 -2633,-925 -2639,-981 -2622,-1028 -2633,-1086 -2649,-1148 -2628,-1195 -2639,-1256 -2617,-1303 -2616,-1361 -2619,-1422 -2634,-1491 -2607,-1538 -2609,-1601 -2628,-1677 -2599,-1724 -2607,-1796 -2623,-1876 -2590,-1922 -2596,-1998 -1016,-899 -988,-907 -799,-886 -758,-873 -742,-887 -703,-873 -688,-887 -657,-880 -628,-876 -596,-866 -581,-877 -556,-874 -530,-869 -515,-879 -494,-881 -467,-871 -452,-880 -430,-878 -407,-872 -392,-880 -372,-878 -351,-873 -336,-880 -317,-879 -296,-873 -281,-879 -263,-878 -244,-872 -229,-877 -211,-875 -196,-880 -179,-877 -162,-877 -145,-874 -130,-877 -114,-875 -97,-869 -82,-872 -66,-870 -51,-873 -36,-883 -21,-884 -5,-883 9,-884 25,-884 40,-881 55,-881 71,-878 86,-878 102,-877 117,-877 132,-879 148,-878 163,-878 179,-876 194,-875 210,-875 226,-874 241,-874 257,-871 273,-872 286,-804 282,-742 271,-663 283,-659 278,-612 270,-559 280,-555 271,-507 280,-503 277,-474 276,-452 273,-427 267,-397 274,-393 273,-376 267,-351 273,-347 272,-332 266,-312 272,-308 272,-297 268,-281 273,-278 270,-265 275,-261 273,-250 273,-241 270,-230 267,-218 270,-214 268,-204 265,-195 269,-192 269,-185 266,-176 269,-173 268,-166 268,-160 271,-156 268,-148 270,-144 269,-138 269,-133 268,-127 270,-124 270,-118 267,-112 269,-108 268,-103 268,-98 267,-93 268,-90 266,-85 267,-81 266,-76 268,-73 269,-69 269,-65 268,-60 269,-57 270,-53 271,-49 272,-45 268,-41 268,-37 268,-33 266,-29 268,-26 266,-22 267,-18 267,-14 268,-11 268,-7 266,-3 262,10 262,14 267,18 266,22 267,25 265,29 268,33 267,37 265,40 265,44 264,48 266,52 269,57 268,60 268,64 267,68 265,72 266,76 268,81 267,85 264,88 267,94 266,98 267,103 267,107 265,111 267,117 265,121 266,126 268,132 272,140 269,144 270,150 273,158 270,161 271,168 272,174 268,178 269,185 272,194 268,198 269,206 273,217 269,221 271,231 273,241 269,245 273,259 269,263 270,275 272,287 267,291 269,304 274,324 268,327 266,337 273,361 266,365 271,388 264,392 265,411 271,442 263,445 265,471 273,511 264,515 271,560 261,563 262,598 263,640 272,708 260,712 261,765 257,873 259,956 240,1164 219,1164 199,1167 178,1163 157,1161 137,1163 116,1161 96,1159 76,1159 55,1157 35,1157 15,1156 -4,1155 -24,1154 -44,1152 -65,1156 -85,1154 -106,1153 -126,1154 -146,1151 -167,1150 -187,1146 -208,1147 -230,1149 -250,1144 -272,1144 -295,1148 -315,1142 -335,1136 -355,1129 -377,1130 -402,1134 -427,1139 -447,1130 -471,1131 -500,1141 -520,1131 -546,1132 -576,1141 -596,1130 -621,1128 -653,1135 -673,1122 -703,1126 -740,1136 -759,1122 -791,1125 -833,1137 -852,1122 -885,1122 -932,1137 -952,1119 -1000,1132 -1020,1114 -1059,1115 -1097,1113 -3557,2926 -3608,2862 -2794,1922 -2779,1841 -2749,1752 -2779,1703 -2763,1628 -2740,1549 -2766,1500 -2753,1431 -2725,1356 -2749,1308 -2733,1242 -2714,1176 -2734,1127 -2726,1067 -2704,1004 -2721,956 -2712,899 -2691,839 -2705,791 -2691,736 -2703,688 -2695,635 -2677,581 -2687,533 -2685,483 -2680,433 -2688,385 -2679,335 -2684,288 -2682,239 -2683,191 -2677,143 -2679,95 -2676,47"
        # ptsStr = "-196,0 -198,-4 -200,-8 -202,-12 -204,-16 -206,-20 -199,-22 -199,-25 -211,-29 -212,-33 -215,-38 -207,-41 -208,-45 -207,-49 -207,-53 -217,-59 -216,-63 -217,-68 -216,-71 -226,-79 -225,-83 -226,-88 -225,-92 -235,-101 -236,-107 -234,-111 -244,-121 -254,-131 -255,-138 -253,-142 -262,-153 -275,-167 -272,-172 -273,-180 -274,-187 -264,-187 -261,-189 -251,-189 -242,-189 -234,-189 -225,-189 -218,-190 -210,-190 -203,-190 -195,-190 -189,-190 -182,-190 -175,-190 -170,-191 -164,-191 -158,-191 -153,-191 -147,-191 -141,-191 -136,-191 -132,-192 -126,-191 -122,-192 -117,-191 -113,-192 -108,-192 -104,-193 -99,-192 -94,-191 -89,-189 -84,-188 -82,-188 -79,-190 -75,-191 -71,-189 -68,-190 -63,-188 -60,-189 -57,-190 -52,-189 -49,-190 -46,-190 -42,-189 -39,-190 -35,-190 -32,-189 -28,-190 -24,-194 -21,-194 -17,-194 -14,-195 -11,-194 -8,-194 -5,-195 -2,-195 3,-195 6,-195 9,-195 13,-196 16,-196 19,-195 22,-195 25,-195 28,-195 34,-195 37,-196 40,-196 44,-196 47,-196 50,-196 53,-196 60,-196 63,-197 66,-196 70,-196 73,-197 77,-197 83,-196 87,-196 90,-196 94,-197 97,-197 101,-196 109,-197 112,-196 116,-196 120,-197 124,-197 132,-196 136,-196 141,-197 146,-196 150,-196 155,-196 164,-196 169,-196 174,-196 180,-196 184,-195 188,-192 196,-193 204,-195 213,-196 222,-197 231,-198 234,-194 250,-199 253,-195 263,-195 273,-195 283,-195 293,-195 303,-194 321,-197 -73,250 -83,223 -85,219 -89,211 -92,207 -93,203 -95,199 -97,195 -99,192 -101,188 -103,184 -106,177 -108,173 -110,170 -112,166 -113,161 -112,156 -115,156 -117,154 -124,156 -126,154 -124,146 -126,144 -124,136 -126,134 -133,136 -135,134 -133,126 -130,119 -132,117 -139,120 -142,117 -139,111 -141,108 -138,102 -146,102 -147,99 -148,96 -150,93 -152,90 -153,87 -155,84 -156,81 -157,77 -161,77 -160,75 -161,71 -162,68 -165,65 -166,62 -167,59 -169,55 -168,53 -171,52 -172,49 -174,45 -175,42 -177,39 -179,35 -179,33 -181,32 -182,28 -184,25 -185,21 -187,17 -189,14 -190,10 -193,7 -189,5 -194,3"
        # ptsStr = "-156,-197 -149,-194 -143,-194 -138,-194 -133,-193 -128,-193 -123,-192 -118,-192 -114,-192 -109,-191 -104,-190 -100,-190 -96,-189 -92,-189 -88,-189 -84,-189 -80,-189 -76,-188 -72,-188 -68,-187 -64,-186 -60,-184 -56,-182 -53,-180 -49,-187 -46,-188 -42,-182 -39,-182 -36,-190 -33,-191 -29,-185 -26,-185 -22,-180 -19,-180 -16,-180 -13,-188 -10,-183 -6,-183 -3,-183 0,-178 3,-181 6,-181 9,-180 13,-180 16,-180 19,-179 22,-179 25,-179 28,-178 31,-178 34,-178 37,-177 41,-177 44,-177 47,-176 50,-176 53,-175 56,-176 60,-175 63,-175 66,-174 70,-174 77,-174 80,-173 83,-173 87,-172 91,-172 94,-171 98,-171 102,-170 106,-170 109,-169 113,-169 118,-168 122,-168 126,-167 130,-167 135,-167 139,-166 144,-166 153,-164 158,-164 163,-163 169,-163 174,-162 180,-161 186,-161 192,-160 198,-159 204,-158 211,-158 217,-156 225,-156 233,-155 243,-154 246,-150 260,-152 279,-156 281,-150 301,-154 303,-148 311,-145 318,-141 313,-132 307,-123 302,-115 296,-107 291,-99 292,-94 279,-84 281,-79 286,-73 283,-68 279,-62 276,-57 273,-52 270,-47 265,-38 262,-33 259,-29 257,-24 254,-20 249,-12 247,-8 244,-4 242,-1 240,2 236,9 234,13 231,16 229,20 227,23 224,30 221,33 219,36 218,39 216,42 202,49 201,53 198,56 197,59 195,63 192,66 191,69 187,72 186,76 185,79 182,82 180,85 178,88 176,92 182,98 180,101 178,104 176,107 174,109 172,112 171,116 169,118 167,121 166,124 163,127 162,130 160,133 158,136 154,142 152,145 150,148 148,152 146,155 145,159 142,162 140,165 138,168 136,171 134,175 132,179 130,183 127,186 125,190 122,194 120,198 117,202 115,206 112,210 109,215 107,219 104,224 101,229 98,233 95,239 91,244 88,249 85,254 80,255 77,266 74,272 70,279 66,285 61,292 57,300 52,306 47,316 42,323 36,332 31,341 25,352 18,362 11,373"
        # ptsStr = "-2258,0 -2258,-40 -2283,-81 -2328,-124 -2326,-166 -2353,-210 -2394,-257 -2389,-300 -2423,-348 -2474,-400 -2467,-444 -2497,-496 -2306,-633 -2238,-657 -2139,-713 -2077,-734 -2001,-749 -1988,-784 -1937,-805 -1866,-816 -1852,-849 -1786,-859 -1771,-891 -1727,-908 -1685,-925 -1633,-936 -1617,-966 -1588,-988 -1539,-996 -1521,-1024 -1483,-1038 -1440,-1047 -1422,-1073 -1384,-1085 -1346,-1095 -1327,-1120 -1296,-1134 -1280,-1161 -1256,-1181 -1121,-1219 -1090,-1229 -1068,-1249 -1035,-1255 -1012,-1273 -986,-1287 -958,-1298 -930,-1308 -907,-1325 -880,-1337 -852,-1347 -829,-1362 -805,-1378 -778,-1388 -752,-1399 -727,-1413 -701,-1424 -676,-1437 -651,-1450 -626,-1463 -600,-1475 -576,-1489 -551,-1504 -526,-1518 -500,-1527 -475,-1544 -451,-1560 -423,-1569 -399,-1587 -374,-1607 -346,-1614 -319,-1627 -294,-1648 -265,-1654 -238,-1671 -211,-1691 -182,-1696 -113,-1382 -90,-1389 -65,-1391 55,-1286 78,-1306 103,-1346 125,-1331 150,-1355 174,-1353 203,-1402 269,-1518 288,-1469 305,-1413 329,-1408 346,-1365 359,-1316 382,-1310 391,-1253 413,-1247 426,-1210 444,-1194 457,-1165 463,-1119 482,-1111 495,-1086 502,-1051 520,-1043 535,-1027 539,-990 546,-962 563,-953 570,-928 575,-900 591,-891 599,-869 605,-846 620,-836 626,-815 634,-796 648,-785 655,-766 655,-740 668,-730 679,-717 685,-699 688,-678 700,-667 708,-652 709,-631 720,-619 730,-606 732,-587 742,-575 745,-558 752,-544 761,-532 766,-516 771,-500 779,-488 785,-473 792,-460 800,-447 807,-434 808,-416 815,-403 828,-393 835,-380 842,-366 848,-353 853,-338 858,-324 869,-312 875,-298 880,-283 888,-270 896,-256 909,-244 913,-229 917,-214 932,-202 936,-187 945,-172 948,-157 956,-142 970,-128 975,-112 976,-96 984,-81 1000,-66 1001,-49 991,-32 974,-16 789,25 788,38 751,48 715,57 714,69 684,77 645,82 643,93 625,100 591,104 590,113 563,117 561,126 549,132 535,137 519,141 501,144 498,152 481,154 478,162 470,167 451,168 440,171 437,177 427,181 412,181 409,187 398,190 395,196 385,197 376,200 373,205 364,208 354,208 350,213 341,215 338,220 330,222 324,224 315,225 311,230 305,232 296,232 292,236 287,239 281,241 276,245 270,246 264,248 260,252 254,253 249,256 244,259 237,259 233,262 228,265 223,267 218,270 213,272 208,275 203,278 198,279 193,282 188,284 184,287 178,288 173,290 168,293 163,295 158,296 153,298 147,300 143,303 138,307 132,308 142,445 135,449 128,456 120,457 112,461 105,467 96,468 89,473 81,479 72,479 64,484 55,493 47,493 38,498 29,507 20,506 11,508 1,520 -7,519 -18,526 -27,525 -37,531 -49,541 -58,539 -70,546 -83,559 -93,557 -107,569 -117,566 -130,573 -147,590 -157,586 -172,596 -188,606 -208,624 -219,619 -240,635 -262,653 -274,647 -296,662 -324,685 -336,678 -361,695 -398,726 -410,718 -438,732 -480,766 -494,757 -532,781 -584,819 -598,808 -677,843 -733,876 -833,920 -899,955 -920,942 -936,925 -653,535 -647,510 -651,495 -660,483 -670,471 -688,465 -696,452 -712,443 -742,442 -750,428 -777,424 -1823,836 -1843,806 -1856,772 -1871,740 -1887,707 -1899,673 -1923,643 -1934,608 -1948,574 -1969,542 -1978,507 -1997,474 -2019,441 -2027,404 -2046,370 -2074,337 -2080,300 -2110,266 -2115,228 -2135,191 -2160,154 -2190,117 -2192,78 -2218,39"
        ptsStr = "-971,0 -964,-17 -964,-35 -958,-53 -951,-70 -950,-88 -945,-105 -943,-122 -939,-139 -934,-156 -931,-174 -924,-190 -919,-207 -913,-223 -909,-240 -906,-257 -902,-274 -897,-291 -1450,-767 -2097,-1145 -2077,-1182 -2086,-1237 -1632,-1319 -1552,-1302 -1529,-1330 -1491,-1345 -1465,-1370 -1214,-1315 -1191,-1337 -1147,-1336 -1057,-1326 -1015,-1322 -909,-1281 -870,-1275 -830,-1266 -808,-1281 -769,-1270 -746,-1284 -714,-1282 -684,-1281 -648,-1271 -626,-1283 -596,-1281 -565,-1274 -543,-1285 -514,-1280 -484,-1273 -462,-1283 -436,-1281 -407,-1273 -385,-1281 -360,-1282 -333,-1272 -310,-1279 -286,-1278 -262,-1276 -240,-1282 -215,-1277 -193,-1282 -170,-1282 -146,-1278 -124,-1281 -101,-1281 -78,-1281 -55,-1280 -33,-1281 -10,-1278 11,-1278 33,-1278 55,-1282 78,-1278 100,-1278 122,-1278 145,-1277 167,-1276 189,-1273 212,-1277 235,-1274 257,-1274 281,-1277 303,-1273 325,-1269 351,-1278 373,-1273 397,-1273 419,-1266 443,-1268 468,-1268 300,-637 306,-621 317,-616 325,-605 339,-608 357,-618 368,-613 824,-1331 862,-1341 885,-1327 925,-1338 2254,-2620 2246,-2519 2208,-2078 2244,-2040 2197,-1928 2200,-1864 2187,-1788 2218,-1750 1301,-871 1316,-849 1314,-817 881,-476 886,-460 893,-445 919,-439 926,-424 961,-422 1305,-556 1295,-526 1304,-504 1305,-479 1301,-453 1308,-431 1306,-406 1306,-382 1305,-358 1311,-336 1305,-311 1310,-289 1309,-266 1306,-243 1310,-221 1310,-198 1306,-175 1309,-153 1312,-132 1314,-110 1315,-88 1318,-66 1319,-44 1318,-22 1329,44 1328,66 1319,88 1318,110 1321,132 1317,154 1319,177 1316,199 1322,223 1318,245 1317,268 1323,292 1318,314 1323,339 1326,364 1320,386 1323,411 1329,438 1321,460 1330,489 1321,511 1325,538 1332,568 1338,598 1327,620 1331,650 1340,683 1328,705 1335,738 1336,769 1346,806 1332,828 1360,880 1345,902 1346,937 1361,983 1344,1006 1351,1049 2598,2210 2608,2298 2606,2641 2622,2752 1376,1574 1317,1558 1290,1579 1231,1559 1203,1580 1160,1576 1118,1575 1077,1573 1028,1556 1001,1572 958,1563 931,1578 894,1577 850,1560 823,1573 788,1571 761,1584 725,1576 689,1568 662,1579 631,1580 597,1571 569,1580 539,1581 507,1574 479,1582 451,1585 433,1633 404,1639 372,1629 344,1634 315,1635 284,1628 256,1632 227,1632 198,1628 170,1631 141,1631 112,1619 84,1619 55,1622 27,1623 0,1621 -29,1626 -57,1625 -86,1628 -115,1628 -143,1624 -172,1628 -202,1633 -231,1628 -261,1633 -289,1627 -320,1632 -352,1639 -381,1632 -413,1636 -446,1644 -475,1635 -509,1643 -538,1633 -571,1635 -605,1638 -644,1651 -673,1638 -709,1642 -752,1657 -781,1643 -819,1646 -866,1664 -895,1648 -936,1651 -987,1669 -1016,1651 -1061,1656 -1121,1681 -1150,1660 -1198,1665 -1266,1692 -1295,1669 -1350,1676 -1424,1703 -1454,1677 -1531,1701 -1560,1673 -1628,1684 -1682,1678 -1870,1560 -1897,1526 -1891,1467 -1889,1413 -1873,1351 -1897,1317 -1893,1265 -558,369 -575,364 -1981,1083 -1982,1038 -1990,826 -1991,785 -1979,740 -1991,705 -1995,666 -1982,623 -1993,587 -1985,546 -1994,511 -1618,355 -1657,333 -1663,303 -1703,278 -981,54 -978,36 -978,18"

        self.pts = []
        self.allPts = []

        pi6 = math.pi / 6
        # VALID_MIN_ANGLE = -math.pi * 3 / 4
        # VALID_MAX_ANGLE = 0

        VALID_MIN_ANGLE = -pi6
        VALID_MAX_ANGLE = pi6

        maxDist = 0

        for s in ptsStr.split(" "):
            x, y = map(int, s.split(","))
            self.allPts.append([x, y])
            bearing = math.atan2(y, x)
            dist = math.hypot(x, y)
            if VALID_MIN_ANGLE <= bearing <= VALID_MAX_ANGLE:
                self.pts.append([x, y])
                if dist > maxDist:
                    maxDist = dist

        self.a, self.b, self.c = self.leastSquareFitLine()

        disToLine = math.fabs(self.c) / math.hypot(self.a, self.b) - self.robotR
        print(self.a, self.b, self.c, maxDist)
        print("disToLine: ", disToLine)


    def leastSquareFitLine(self):

        n = len(self.pts)
        sumX = 0
        sumY = 0
        sumX2 = 0
        sumY2 = 0
        sumXY = 0

        for x, y in self.pts:
            sumX += x
            sumY += y
            sumX2 += x * x
            sumY2 += y * y
            sumXY += x * y

        varX = sumX2 - sumX * sumX / n
        varY = sumY2 - sumY * sumY / n
        print("varX: ", varX)
        print("varY: ", varY)
        if varY > varX:
            a = sumY * sumY - sumY2 * n
            b = sumXY * n - sumX * sumY
            c = sumY2 * sumX - sumY * sumXY
        else:
            a = sumXY * n - sumX * sumY
            b = sumX * sumX - sumX2 * n
            c = sumX2 * sumY - sumX * sumXY

        return a, b, c

    def leastSquareFitLine_Old(self):

        n = len(self.pts)
        sumX = 0
        sumY = 0
        sumX2 = 0
        sumY2 = 0
        sumXY = 0

        for x, y in self.pts:
            sumX += x
            sumY += y
            sumX2 += x * x
            sumY2 += y * y
            sumXY += x * y

        a = sumXY * n - sumX * sumY
        b = sumX * sumX - sumX2 * n
        c = sumX2 * sumY - sumX * sumXY
        if a == 0 and b == 0 and c == 0:
            a = sumY * sumY - sumY2 * n
            b = sumXY * n - sumX * sumY
            c = sumY2 * sumX - sumY * sumXY

        return a, b, c

    def drawLabel(self):

        self.qp.setPen(Colors.DefaultTextColor)
        dx = self.mousePosEnd.x() - self.robotX
        dy = self.mousePosEnd.y() - self.robotY
        range = math.hypot(dx, dy)
        bearing = math.atan2(dy, dx)
        self.qp.drawText(50, 50, "x: {} y: {}   range: {:.2f} bearing: {:.2f} | {:.2f}".format(dx, dy, range, bearing / math.pi * 180, bearing))


    def drawObs(self, points, color):

        self.qp.setPen(QPen(color, 1))
        for x, y in points:
            self.qp.drawRect(self.robotX + x, self.robotY + y, 2, 2)


    def drawRay(self, x, y, deg, length, penColor, penWidth):

        self.qp.setPen(QPen(penColor, penWidth))
        rad = math.pi / 180 * deg
        self.qp.drawLine(x, y, x + length * math.cos(rad), y + length * math.sin(rad))

    def drawRobot(self, x, y, deg):

        # body
        self.qp.setPen(QColor(0, 255, 0))
        self.qp.drawEllipse(QPoint(x, y), self.robotR, self.robotR)

        # glue
        self.qp.setPen(QColor(0, 200, 0))
        self.qp.drawEllipse(QPoint(x, y), self.robotRwithGlue, self.robotRwithGlue)

        # right brush
        self.qp.setPen(QColor(0, 255, 0))
        self.qp.drawEllipse(QPoint(x + self.rightBrushXOffset, y + self.rightBrushYOffset), self.rightBrushR, self.rightBrushR)

        # bearing
        self.drawRay(x, y, deg, 250, QColor(0, 255, 0), 1)

    def drawLine(self, a, b, c):

        if a + b / 2 == 0 or a - b / 2 == 0:
            print("invalid line param")
            return

        x1 = -c / (a + b / 2)
        y1 = x1 / 2
        x2 = -c / (a - b / 2)
        y2 = -x2 / 2

        self.qp.setPen(QColor(0, 0, 255))
        self.qp.drawLine(self.robotX + x1, self.robotY + y1, self.robotX + x2, self.robotY + y2)

    def paintObjects(self):

        self.drawLabel()

        self.qp.setBrush(Qt.NoBrush)

        self.drawRay(self.robotX, self.robotY, -30, 600, QColor(128, 128, 128), 1)
        self.drawRay(self.robotX, self.robotY, 30, 600, QColor(128, 128, 128), 1)

        self.drawRobot(self.robotX, self.robotY, 0)

        self.drawLine(self.a, self.b, self.c)
        self.drawObs(self.allPts, QColor(255, 0, 0))




    def mouseMoveEvent(self, e):
        self.mousePosEnd = QPoint(e.x(), e.y())
        self.update()


if __name__ == '__main__':

    app = QApplication(sys.argv)
    ex = WallDisViewer()
    sys.exit(app.exec_())
